// Code generated by go-bindata.
// sources:
// ../../templates/errorsnew.go.eg
// ../../templates/fmterrorf1.go.eg
// ../../templates/fmterrorf2.go.eg
// ../../templates/fmterrorf3.go.eg
// ../../templates/fmterrorf4.go.eg
// ../../templates/fmterrorf5.go.eg
// ../../templates/fmterrorf6.go.eg
// ../../templates/fmterrorf7.go.eg
// ../../templates/fmterrorf8.go.eg
// ../../templates/fmterrorf9.go.eg
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _errorsnewGoEg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x3b\xae\x83\x30\x14\x44\x6b\xee\x2a\x2c\x57\xd0\xc0\x2a\x5e\xfb\xf6\x60\xac\xc1\x71\xc0\x36\x1a\x5f\x2b\x52\xa2\xec\x3d\x22\x1f\x29\x55\xca\xd1\xcc\x39\xb3\x3b\xbf\xba\x00\xa3\x48\xfb\xe6\x14\x55\x24\xa6\xbd\x50\x4d\x2f\x9d\x05\x59\x58\xad\x48\x67\x43\xd4\x53\x9b\x47\x5f\xd2\xc4\x33\xfc\xd5\x6d\x71\x9d\x62\xae\xca\x96\x90\x15\xb4\x32\x88\x2c\x2d\x7b\x33\x63\x29\x44\x9f\x6a\x30\x55\x19\x73\x18\xcc\x53\x64\x6e\xd2\x11\xda\x98\x5f\xb9\x8e\xff\xb8\x1c\xb3\x41\xee\x6f\xd4\x2d\x0a\xfe\x24\xbf\x2f\xc7\xbf\xa3\xfc\x18\x1e\x01\x00\x00\xff\xff\x0b\xe7\x6f\xdc\xcb\x00\x00\x00")

func errorsnewGoEgBytes() ([]byte, error) {
	return bindataRead(
		_errorsnewGoEg,
		"errorsnew.go.eg",
	)
}

func errorsnewGoEg() (*asset, error) {
	bytes, err := errorsnewGoEgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errorsnew.go.eg", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fmterrorf1GoEg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xce\x31\x8e\x84\x30\x0c\x85\xe1\x1a\x9f\xc2\x4a\x05\xd2\x0a\x4e\xb1\x07\x31\x91\x9d\xcd\x82\x13\xe4\x38\xcd\x22\xee\xbe\x62\x34\xc5\x14\xd3\x4c\x6b\xf9\xff\xf4\x0e\x8a\x1b\x25\x46\x67\x3d\x76\x72\x6e\x00\x59\x8f\x6a\x8e\x23\x0c\x41\xd4\x03\xc0\x10\x52\xf6\x9f\xbe\xce\xb1\xea\x62\xbf\x1c\xff\x68\xcf\xdb\x92\x4b\x73\xeb\xca\xc5\xd9\x02\x4c\x00\xd2\x4b\xc4\x95\xa5\x1a\x8f\xda\x12\x36\xb7\x5c\xd2\x17\x92\x25\xcc\xf7\x97\x50\xe4\xf3\x9a\x90\xcd\xaa\xe1\x09\x83\xb1\x77\x2b\x28\xea\xf3\xf7\x7d\x93\xbb\x7b\x04\x13\x5c\x4f\x90\xc4\xd9\x3e\xf3\x5e\x97\xbd\x83\xff\x03\x00\x00\xff\xff\xc9\x20\x4e\x12\xf5\x00\x00\x00")

func fmterrorf1GoEgBytes() ([]byte, error) {
	return bindataRead(
		_fmterrorf1GoEg,
		"fmterrorf1.go.eg",
	)
}

func fmterrorf1GoEg() (*asset, error) {
	bytes, err := fmterrorf1GoEgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fmterrorf1.go.eg", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fmterrorf2GoEg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\xc1\x8a\x84\x30\x0c\x80\xe1\xb3\x79\x8a\xd0\x93\xc2\xa2\xec\xbe\xc3\x3e\x48\x2d\x49\xb7\xab\x69\x25\x4d\x2f\x23\xbe\xfb\xe0\x30\x07\x99\x83\x97\x1c\x42\xfe\x8f\x6c\x3e\x2c\x3e\x12\x1a\xc9\xb6\x7a\xa3\x0a\x90\x64\x2b\x6a\xd8\x43\xe7\x58\xcc\x01\x74\x2e\x26\xfb\x6b\xf3\x18\x8a\x4c\xfa\x4f\xe1\xe1\xd7\xb4\x4c\x29\x57\xd3\x26\x94\x8d\xd4\xc1\x00\xc0\x2d\x07\x9c\x89\x8b\x52\x2f\x35\x62\x35\x4d\x39\x7e\xa1\xd7\xf8\xfd\x9a\x3f\x98\xce\x63\xf6\x81\xf6\x63\x40\x52\x2d\x8a\x3b\x74\x4a\xd6\x34\x23\x8b\x8d\xbf\xe7\x8e\xcf\xfc\xda\x0d\x70\xbc\x79\xcf\x46\xfa\xa9\xdf\xb3\xd7\x3f\x6f\xfc\x67\x00\x00\x00\xff\xff\xb0\xd9\xad\x40\x0a\x01\x00\x00")

func fmterrorf2GoEgBytes() ([]byte, error) {
	return bindataRead(
		_fmterrorf2GoEg,
		"fmterrorf2.go.eg",
	)
}

func fmterrorf2GoEg() (*asset, error) {
	bytes, err := fmterrorf2GoEgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fmterrorf2.go.eg", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fmterrorf3GoEg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8f\x31\x0a\xc3\x30\x0c\x45\xe7\xe8\x14\xc2\x53\x02\x25\xa1\xed\x19\x7a\x10\xc7\xc8\xae\x9b\xc8\x0e\xb2\xbc\x34\xe4\xee\x25\xa1\x43\xa1\x43\x87\x2e\x6f\x10\x3c\x3d\xfe\x62\xdd\x64\x03\xa1\x12\x2f\xb3\x55\x2a\x00\x91\x97\x2c\x8a\x2d\x34\xc6\xb3\x1a\x80\xc6\x84\xa8\xf7\x3a\xf6\x2e\xf3\x20\x0f\x72\x4f\x3b\xc7\x69\x88\xa9\xa8\x54\xa6\xa4\x24\x06\x3a\x00\x5f\x93\xc3\x91\x7c\x16\x6a\xb9\x04\x2c\x2a\x31\x85\x13\x5a\x09\xe7\x83\x97\x83\x57\x8c\xbb\xe2\xad\xa3\x75\xeb\x90\x44\xb2\xe0\x0a\x8d\x90\x56\x49\xe8\x59\xfb\xdb\x7e\xf3\xfb\x93\x6f\xbb\x83\xed\x9d\xb2\x5e\x49\xfe\x28\x7d\x0e\xf8\x99\x7c\x05\x00\x00\xff\xff\xc2\x33\x29\xcf\x29\x01\x00\x00")

func fmterrorf3GoEgBytes() ([]byte, error) {
	return bindataRead(
		_fmterrorf3GoEg,
		"fmterrorf3.go.eg",
	)
}

func fmterrorf3GoEg() (*asset, error) {
	bytes, err := fmterrorf3GoEgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fmterrorf3.go.eg", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fmterrorf4GoEg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8f\x31\xca\xc3\x30\x0c\x46\xe7\xe8\x14\xc2\x53\x02\x3f\x09\x7f\xdb\x2b\xf4\x20\x8e\x91\x5d\x37\x91\x1d\x64\x79\x69\xc8\xdd\x4b\x42\x87\x2e\x85\x42\x97\x37\x08\xf4\x1e\xdf\x62\xdd\x64\x03\xa1\x12\x2f\xb3\x55\x2a\x00\x91\x97\x2c\x8a\x2d\x34\xc6\xb3\x1a\x80\xc6\x84\xa8\xb7\x3a\xf6\x2e\xf3\x20\x77\x72\x0f\x3b\xc7\x69\x88\xa9\xa8\x54\xa6\xa4\x24\x06\x3a\x00\x5f\x93\xc3\x91\x7c\x16\x6a\xb9\x04\x2c\x2a\x31\x85\x3f\xb4\x12\xfe\x0f\x9e\x0e\x9e\x0f\x5e\x30\xee\x8f\xde\x3a\x5a\xb7\x0e\x49\x24\x0b\xae\xd0\x08\x69\x95\x84\x9e\xb5\xbf\xee\x37\xbf\xab\x3e\x39\x3a\xd8\x5e\x59\xeb\x95\xe4\xe7\xea\xfb\xa4\x2f\xf3\xcf\x00\x00\x00\xff\xff\xc5\xae\x5f\x7c\x41\x01\x00\x00")

func fmterrorf4GoEgBytes() ([]byte, error) {
	return bindataRead(
		_fmterrorf4GoEg,
		"fmterrorf4.go.eg",
	)
}

func fmterrorf4GoEg() (*asset, error) {
	bytes, err := fmterrorf4GoEgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fmterrorf4.go.eg", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fmterrorf5GoEg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x8f\x3d\x0a\xc3\x30\x0c\x46\xe7\xe8\x14\xc2\x53\x02\x25\xa1\x7f\x47\xe8\x41\x1c\x23\xbb\x6e\x62\x3b\xc8\xf2\xd2\x90\xbb\x97\x98\x0e\x9d\x0a\x85\x2e\x6f\x10\xe8\xf1\xbe\x45\x9b\x49\x3b\x42\xa1\xb0\xcc\x5a\x28\x03\xf8\xb0\x24\x16\x6c\xa1\x51\x36\x88\x02\x68\x94\xf3\x72\x2f\x63\x6f\x52\x18\xf8\x41\xe6\xa9\x67\x3f\x0d\x3e\x66\xe1\x12\x28\x0a\xb1\x82\x0e\xc0\x96\x68\x70\x24\x9b\x98\xda\x90\x1d\x66\x61\x1f\xdd\x01\x35\xbb\x63\xe5\xa9\xf2\x5c\x79\xa9\xbc\xa2\xdf\xdf\xad\x36\xb4\x6e\x1d\x12\x73\x62\x5c\xa1\x61\x92\xc2\x11\x6d\x90\xfe\xb6\xdf\xec\x2e\xfc\x6e\xea\x60\x7b\x27\x68\x2b\xc4\x7f\x2a\xf8\x1c\xf9\x53\xca\x2b\x00\x00\xff\xff\x43\x5d\x3c\xc9\x59\x01\x00\x00")

func fmterrorf5GoEgBytes() ([]byte, error) {
	return bindataRead(
		_fmterrorf5GoEg,
		"fmterrorf5.go.eg",
	)
}

func fmterrorf5GoEg() (*asset, error) {
	bytes, err := fmterrorf5GoEgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fmterrorf5.go.eg", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fmterrorf6GoEg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xcf\x3f\xaa\xc3\x30\x0c\xc7\xf1\x39\x3a\x85\xf0\x94\xc0\x23\xe1\xf5\xdf\x0d\x7a\x10\xc7\xc8\xae\x9b\xd8\x0e\xb2\xbc\x34\xe4\xee\x25\xa6\x43\xc7\x52\xba\x7c\x06\x0d\x3f\xbe\x5a\xb4\x99\xb4\x23\x14\x0a\xcb\xac\x85\x32\x80\x0f\x4b\x62\xc1\x16\x1a\x65\x83\x28\x80\x46\x39\x2f\xb7\x32\xf6\x26\x85\x81\xef\x64\x1e\x7a\xf6\xd3\xe0\x63\x16\x2e\x81\xa2\x10\x2b\xe8\x00\x6c\x89\x06\x47\xb2\x89\xa9\x0d\xd9\x61\x16\xf6\xd1\xfd\xa1\x66\xf7\x5f\x3d\x54\x8f\xd5\x53\xf5\x5c\xbd\xa0\xdf\x47\xac\x36\xb4\x6e\x1d\x12\x73\x62\x5c\xa1\x61\x92\xc2\x11\x6d\x90\xfe\xba\xdf\xec\x3e\xfb\xc9\x5e\x07\xdb\x2b\x47\x5b\x21\xfe\x69\xcd\xfb\xdb\x5f\x64\x3d\x03\x00\x00\xff\xff\x9c\xe1\x15\xae\x71\x01\x00\x00")

func fmterrorf6GoEgBytes() ([]byte, error) {
	return bindataRead(
		_fmterrorf6GoEg,
		"fmterrorf6.go.eg",
	)
}

func fmterrorf6GoEg() (*asset, error) {
	bytes, err := fmterrorf6GoEgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fmterrorf6.go.eg", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fmterrorf7GoEg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\xd0\x3d\x8a\xc3\x30\x10\x86\xe1\xda\x73\x8a\x41\x95\x0d\x8b\xcd\xee\xe6\xe7\x04\x39\x88\x2c\x46\x8a\x62\x4b\x32\xa3\x51\x13\xe3\xbb\x07\x8b\x14\x29\x43\x20\xcd\x53\x4c\xf1\xf1\x32\x8b\x36\x93\x76\x84\x42\x61\x99\xb5\x50\x06\xf0\x61\x49\x2c\xd8\x42\xa3\x6c\x10\x05\xd0\x28\xe7\xe5\x5a\xc6\xde\xa4\x30\xf0\x8d\xcc\x5d\xcf\x7e\x1a\x7c\xcc\xc2\x25\x50\x14\x62\x05\x1d\x80\x2d\xd1\xe0\x48\x36\x31\xb5\x21\x3b\xcc\xc2\x3e\xba\x1f\xd4\xec\x7e\xab\x7f\xd5\xff\xea\xa1\x7a\xac\x9e\xaa\x67\xf4\xfb\x94\xd5\x86\xd6\xad\x43\x62\x4e\x8c\x2b\x34\x4c\x52\x38\xa2\x0d\xd2\x5f\xf6\x9b\xdd\xc7\xdf\x5f\xed\x60\x7b\xa6\x69\x2b\xc4\x5f\x28\x7b\x7d\xc4\xc7\x89\x8f\x00\x00\x00\xff\xff\x4d\x14\x0b\x21\x89\x01\x00\x00")

func fmterrorf7GoEgBytes() ([]byte, error) {
	return bindataRead(
		_fmterrorf7GoEg,
		"fmterrorf7.go.eg",
	)
}

func fmterrorf7GoEg() (*asset, error) {
	bytes, err := fmterrorf7GoEgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fmterrorf7.go.eg", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fmterrorf8GoEg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\xd0\x3f\xae\xc3\x20\x0c\xc7\xf1\x39\x3e\x85\xc5\x94\x48\x4f\x89\xde\xbf\xb6\x17\xe8\x41\x08\x32\x94\x26\x40\x64\xcc\xd2\x28\x77\xaf\x82\x3a\x74\xad\xaa\x2e\x9f\x81\xe1\xc7\x57\x5e\xb4\x99\xb4\x23\x14\x0a\xcb\xac\x85\x32\x80\x0f\x4b\x62\xc1\x16\x1a\x65\x83\x28\x80\x46\x39\x2f\x97\x32\xf6\x26\x85\x81\xaf\x64\x6e\x7a\xf6\xd3\xe0\x63\x16\x2e\x81\xa2\x10\x2b\xe8\x00\x6c\x89\x06\x47\xb2\x89\xa9\x0d\xd9\x61\x16\xf6\xd1\x7d\xa1\x66\xf7\x5d\xfd\xa9\xfe\x56\xff\xaa\xff\xd5\x43\xf5\x58\x3d\xa1\xdf\x07\xad\x36\xb4\x6e\x1d\x12\x73\x62\x5c\xa1\x61\x92\xc2\x11\x6d\x90\xfe\xbc\xbf\xd9\xfd\x8b\x57\xb7\x3b\xd8\x1e\x99\xda\x0a\xf1\xc7\x2a\x9f\x4f\xf3\x66\xee\x3d\x00\x00\xff\xff\xe5\x02\x54\xc3\xa1\x01\x00\x00")

func fmterrorf8GoEgBytes() ([]byte, error) {
	return bindataRead(
		_fmterrorf8GoEg,
		"fmterrorf8.go.eg",
	)
}

func fmterrorf8GoEg() (*asset, error) {
	bytes, err := fmterrorf8GoEgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fmterrorf8.go.eg", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fmterrorf9GoEg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\xd0\x3d\x6e\xc4\x20\x10\x86\xe1\xda\x73\x8a\x11\x95\x2d\x45\xb6\xf2\x9f\x1c\x20\x07\xc1\x68\x20\xc4\x06\xac\x61\x68\x62\xf9\xee\x91\x47\x29\xb6\x5e\xed\x36\x4f\x41\xc1\xf7\x6a\x36\xeb\x16\x1b\x08\x85\xd2\xb6\x5a\xa1\x0a\x10\xd3\x56\x58\xb0\x87\xce\xf8\x24\x06\xa0\x33\x21\xca\x77\x9b\x47\x57\xd2\xc4\x3f\xe4\x7e\xed\x1a\x97\x29\xe6\x2a\xdc\x12\x65\x21\x36\x30\x00\xf8\x96\x1d\xce\xe4\x0b\x53\x9f\x6a\xc0\x2a\x1c\x73\x78\x40\xcb\xe1\x51\x7d\x52\x9f\xd5\x17\xf5\x55\x7d\x53\xdf\xd5\x0f\xf5\x13\xe3\xf9\xad\xb7\x8e\xf6\x63\x40\x62\x2e\x8c\x3b\x74\x4c\xd2\x38\xa3\x4f\x32\x7e\x9d\x6f\xfe\x1c\xba\x6e\x61\x80\xe3\x3f\xd9\x7a\x21\xbe\x73\xf1\xe5\xb1\x6e\x92\xfe\x17\x00\x00\xff\xff\x22\x33\xc7\x86\xb9\x01\x00\x00")

func fmterrorf9GoEgBytes() ([]byte, error) {
	return bindataRead(
		_fmterrorf9GoEg,
		"fmterrorf9.go.eg",
	)
}

func fmterrorf9GoEg() (*asset, error) {
	bytes, err := fmterrorf9GoEgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fmterrorf9.go.eg", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"errorsnew.go.eg": errorsnewGoEg,
	"fmterrorf1.go.eg": fmterrorf1GoEg,
	"fmterrorf2.go.eg": fmterrorf2GoEg,
	"fmterrorf3.go.eg": fmterrorf3GoEg,
	"fmterrorf4.go.eg": fmterrorf4GoEg,
	"fmterrorf5.go.eg": fmterrorf5GoEg,
	"fmterrorf6.go.eg": fmterrorf6GoEg,
	"fmterrorf7.go.eg": fmterrorf7GoEg,
	"fmterrorf8.go.eg": fmterrorf8GoEg,
	"fmterrorf9.go.eg": fmterrorf9GoEg,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"errorsnew.go.eg": &bintree{errorsnewGoEg, map[string]*bintree{}},
	"fmterrorf1.go.eg": &bintree{fmterrorf1GoEg, map[string]*bintree{}},
	"fmterrorf2.go.eg": &bintree{fmterrorf2GoEg, map[string]*bintree{}},
	"fmterrorf3.go.eg": &bintree{fmterrorf3GoEg, map[string]*bintree{}},
	"fmterrorf4.go.eg": &bintree{fmterrorf4GoEg, map[string]*bintree{}},
	"fmterrorf5.go.eg": &bintree{fmterrorf5GoEg, map[string]*bintree{}},
	"fmterrorf6.go.eg": &bintree{fmterrorf6GoEg, map[string]*bintree{}},
	"fmterrorf7.go.eg": &bintree{fmterrorf7GoEg, map[string]*bintree{}},
	"fmterrorf8.go.eg": &bintree{fmterrorf8GoEg, map[string]*bintree{}},
	"fmterrorf9.go.eg": &bintree{fmterrorf9GoEg, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

